name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: cads-research
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment
        run: |
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Requirements file check:"
          ls -la requirements.txt
          echo "CADS directory check:"
          ls -la cads/ || echo "CADS directory structure may differ in CI"
          echo "Project structure:"
          ls -la

      - name: Set up test environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SUPABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "OPENALEX_EMAIL=test@example.com" >> $GITHUB_ENV
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: Generate comprehensive test data
        run: |
          echo "üîß Generating comprehensive test data for CI environment..."
          python3 scripts/ci/generate_test_data.py
          
          echo "üìã Verifying generated files..."
          ls -la data/processed/
          ls -la visuals/public/data/
          
          echo "üìä File sizes:"
          find data/ visuals/public/data/ -name "*.json" -exec ls -lh {} \;
          echo "üì¶ Compressed files:"
          find data/ visuals/public/data/ -name "*.gz" -exec ls -lh {} \;
          
          echo "‚úÖ Comprehensive test data generated successfully"

      - name: Run comprehensive test suite
        run: |
          chmod +x .github/scripts/run-tests.sh
          ./.github/scripts/run-tests.sh

  deploy:
    name: Deploy to Vercel
    needs: test
    runs-on: ubuntu-latest
    environment: cads-research
    # Only deploy if tests pass AND we're on main branch AND it's a push (not PR)
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify test job succeeded
        run: |
          echo "‚úÖ All tests passed successfully - proceeding with deployment"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

      - name: Debug Vercel configuration
        run: |
          echo "üîç Verifying Vercel environment variables..."
          echo "VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN != '' && 'SET' || 'NOT SET' }}"
          echo "VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID != '' && 'SET' || 'NOT SET' }}"
          echo "VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID != '' && 'SET' || 'NOT SET' }}"
          echo "Environment: cads-research"

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel
        run: |
          echo "üöÄ Starting Vercel deployment..."
          
          # Verify environment variables are available
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "‚ùå VERCEL_TOKEN is not set"
            exit 1
          fi
          
          if [ -z "$VERCEL_ORG_ID" ]; then
            echo "‚ùå VERCEL_ORG_ID is not set"
            exit 1
          fi
          
          if [ -z "$VERCEL_PROJECT_ID" ]; then
            echo "‚ùå VERCEL_PROJECT_ID is not set"
            exit 1
          fi
          
          echo "‚úÖ All Vercel environment variables are set"
          
          # Deploy to existing project using correct project IDs
          echo "üöÄ Deploying to existing Vercel project..."
          
          # Remove any existing .vercel directory to ensure clean deployment
          rm -rf .vercel
          
          # Create .vercel directory with correct project configuration
          mkdir -p .vercel
          cat > .vercel/project.json << EOF
          {
            "projectId": "$VERCEL_PROJECT_ID",
            "orgId": "$VERCEL_ORG_ID"
          }
          EOF
          
          echo "üìÅ Using project configuration:"
          cat .vercel/project.json
          
          # Deploy to the existing cads-research project
          echo "üöÄ Deploying to cads-research project..."
          vercel --prod --token "$VERCEL_TOKEN" --yes
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Health check
        run: |
          echo "üè• Running post-deployment health check..."
          echo "Checking URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}"
          
          # Wait for deployment to be fully available
          sleep 30
          
          # Test main page
          echo "Testing main page..."
          curl -f -s "${{ secrets.VERCEL_DEPLOYMENT_URL }}" > /dev/null || exit 1
          
          # Test data endpoint
          echo "Testing data endpoint..."
          curl -f -s "${{ secrets.VERCEL_DEPLOYMENT_URL }}/data/visualization-data.json" > /dev/null || exit 1
          
          echo "‚úÖ Deployment health check passed"

      - name: Deployment success notification
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}"

  # This job runs when tests fail to provide clear feedback
  test-failure-notification:
    name: Test Failure Notification
    needs: test
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Test failure notification
        run: |
          echo "‚ùå Tests failed - deployment blocked!"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Please fix the failing tests before deployment can proceed."
          exit 1

  # Summary job that always runs to provide final status
  summary:
    name: Pipeline Summary
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Pipeline summary
        run: |
          echo "üìã CI/CD Pipeline Summary"
          echo "======================="
          echo "Test Status: ${{ needs.test.result }}"
          echo "Deploy Status: ${{ needs.deploy.result }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Tests: PASSED"
          else
            echo "‚ùå Tests: FAILED"
          fi
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment: COMPLETED"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Deployment: SKIPPED (not main branch or tests failed)"
          else
            echo "‚ùå Deployment: FAILED"
          fi