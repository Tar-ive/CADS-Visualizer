name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: cads-research
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r cads/requirements.txt

      - name: Debug environment
        run: |
          echo "Python version: $(python --version)"
          echo "Current directory: $(pwd)"
          echo "Requirements file check:"
          ls -la cads/requirements.txt
          echo "Project structure:"
          ls -la

      - name: Set up test environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SUPABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
          echo "OPENALEX_EMAIL=test@example.com" >> $GITHUB_ENV
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> $GITHUB_ENV
          echo "CI=true" >> $GITHUB_ENV

      - name: Generate test data files
        run: |
          echo "üìÅ Creating required data directories..."
          mkdir -p data/processed visuals/public/data data/search
          
          echo "üìÑ Generating minimal test data files..."
          echo '{"test": "data", "items": []}' > data/processed/visualization-data.json
          echo '{"clusters": []}' > data/processed/cluster_themes.json
          echo '{"results": []}' > data/processed/clustering_results.json
          echo '{"index": []}' > data/search/search-index.json
          
          # Copy to visualization directory
          cp data/processed/visualization-data.json visuals/public/data/
          cp data/processed/cluster_themes.json visuals/public/data/
          cp data/processed/clustering_results.json visuals/public/data/
          cp data/search/search-index.json visuals/public/data/
          
          echo "‚úÖ Test data files generated successfully"

      - name: Run comprehensive test suite
        run: |
          chmod +x .github/scripts/run-tests.sh
          ./.github/scripts/run-tests.sh

  deploy:
    name: Deploy to Vercel
    needs: test
    runs-on: ubuntu-latest
    # Only deploy if tests pass AND we're on main branch AND it's a push (not PR)
    if: success() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify test job succeeded
        run: |
          echo "‚úÖ All tests passed successfully - proceeding with deployment"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Health check
        run: |
          echo "üè• Running post-deployment health check..."
          sleep 30
          curl -f ${{ secrets.VERCEL_DEPLOYMENT_URL }} || exit 1
          echo "‚úÖ Deployment health check passed"

      - name: Deployment success notification
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "URL: ${{ secrets.VERCEL_DEPLOYMENT_URL }}"

  # This job runs when tests fail to provide clear feedback
  test-failure-notification:
    name: Test Failure Notification
    needs: test
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Test failure notification
        run: |
          echo "‚ùå Tests failed - deployment blocked!"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Please fix the failing tests before deployment can proceed."
          exit 1

  # Summary job that always runs to provide final status
  summary:
    name: Pipeline Summary
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Pipeline summary
        run: |
          echo "üìã CI/CD Pipeline Summary"
          echo "======================="
          echo "Test Status: ${{ needs.test.result }}"
          echo "Deploy Status: ${{ needs.deploy.result }}"
          echo "Branch: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Tests: PASSED"
          else
            echo "‚ùå Tests: FAILED"
          fi
          
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment: COMPLETED"
          elif [[ "${{ needs.deploy.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Deployment: SKIPPED (not main branch or tests failed)"
          else
            echo "‚ùå Deployment: FAILED"
          fi